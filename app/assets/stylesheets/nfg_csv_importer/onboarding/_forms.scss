//
// Textual form controls
//

input[type="text"] { outline: none; } // used to remove outline on quick search input

.form-control {
  max-width: 100%;
  height: $input-height;
  @include rem(padding, $input-padding-y $input-padding-x);
  @include rem(font-size, $input-font-size);
  line-height: $input-line-height;
  @include box-shadow(none);
  outline: none;

  // Make inputs at least the height of their button counterpart (base line-height + padding + border).
  // Only apply the height to textual inputs and some selects.
  &:not(textarea),
  &:not(select[size]),
  &:not(select[multiple]) {
    height: $input-height;
  }
  &:-ms-input-placeholder { color: $input-color-placeholder; }
  &::-webkit-input-placeholder { color: $input-color-placeholder; }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.

  &.disabled, &:disabled, &[disabled] {
    color: $input-color-disabled;
    background-color: $input-bg-disabled;
    border-color: $input-border-color-disabled;
    pointer-events: none;
    cursor: $cursor-disabled;
  }
}
textarea {
  min-height: 150px;
  line-height: 1.5;
  vertical-align: text-top;
  &.form-control { @include rem(padding, $input-padding-x); }
}


//
// Labels
//

// For use with horizontal and inline forms, when you need the label text to
// align with the form controls.
.form-control-label {
  padding: 0;
  @include rem(padding-right, $input-padding-x);
  @include rem(padding-bottom, $input-padding-y);
  @include rem(padding-left, $input-padding-x);
  margin-bottom: 0; // Override the `<label>` default
  @include rem(font-size, $font-size-base);
  @include media-breakpoint-up(md) { @include rem(padding-top, $input-padding-y); }
}

// Miscellanous Text Helpers in Forms
.form-group {
  .required, abbr[title='required'] {
    font-weight: $font-weight-bold;
    color: $brand-danger;
    cursor: default;
    border-bottom: none;
  }
}

.text-help {
  @include rem(margin-top, $spacer-quarter);
  font-weight: $font-weight-medium;
  font-style: italic;
  @include rem(font-size, $font-size-xs);
  line-height: 1.1;
  color: $font-color-secondary;
  display: block;
  small { @include rem(font-size, $font-size-xs); }
}


// Static form control text
//
// Apply class to an element to make any string of text align with labels in a
// horizontal form layout.

.form-control-static {
  min-height: 0;
  padding-top: 0;
  padding-bottom: 0;
  color: $gray-dark;
  @include media-breakpoint-up(md) {
    line-height: $line-height;
    @include rem(min-height, $input-height);
    @include rem(padding-top, $input-padding-y + 0.125rem);
    @include rem(padding-bottom, $input-padding-y);
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.form-control-sm {
  height: $input-height-sm;
  @include rem(padding, $input-padding-y-sm $input-padding-x-sm);
  @include rem(font-size, $input-font-size-sm);
  line-height: $input-line-height-sm;
  @include border-radius($input-border-radius-sm);
  &:not(textarea),
  &:not(select[size]),
  &:not(select[multiple]) {
    height: $input-height-sm;
  }
}

.form-control-lg {
  height: $input-height-lg;
  padding: $input-padding-y-lg $input-padding-x-lg;
  font-size: $input-font-size-lg;
  line-height: $input-line-height-lg;
  @include border-radius($input-border-radius-lg);
  &:not(textarea),
  &:not(select[size]),
  &:not(select[multiple]) {
    height: $input-height-lg;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: 0;
  + .form-group { @include rem(margin-top, $spacer-base); }
}


// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled]
  &:disabled,
  &.disabled {
    cursor: $cursor-disabled;
  }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled {
    cursor: $cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled {
    label {
      cursor: $cursor-disabled;
    }
  }
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    // Inline-block all the things for "inline"
    .form-group {
      + .form-group { margin-top: 0; }
    }
  }
}

// Sortable options (used on form fields for checkboxes/radios/select options)
.option {
  &.ui-sortable-placeholder {
    visibility: visible !important;
    background: $bg-color-primary;
    border: $border-width dashed $border-color-primary;
    @include rem(margin-bottom, $spacer-quarter);
  }
  &.ui-sortable-helper { opacity: 0.5; }
}

// Datepicker form element
input.datetime-picker, input.date-picker {
  @include rem(padding-right, $spacer-base-half);
  cursor: pointer;
  z-index: 10;
  background-color: $input-bg !important;
  background-image: image-url('ux/icon-calendar.png');
  background-repeat: no-repeat;
  background-size: 12px 13px;
  background-position: right 13px top 11px;
}
