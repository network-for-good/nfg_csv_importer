// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.body-container {
  height: 100%; // needs to be 100% height for side nav
  z-index: $zindex-body-container;
}

.container-flush {
  margin-left: -24px !important;
  margin-right: -24px !important;
}

.container-wrap {
  position: relative;
  z-index: 0;
  @include media-breakpoint-down(md) { @include rem(padding-bottom, $spacer-double); }
  @include media-breakpoint-up(lg) {
    @include rem(padding-top, $spacer-double);
    @include rem(padding-left, 200px);
  }
  @include media-breakpoint-down(md) {
    &.nav-slide {
      .site-navbar { @include rem(left, 200px); }
      .container-main { @include rem(margin-left, 200px); }
    }
  }
}

.container-main {
  margin-left: 0;
  width: 100%;
  @include transition(margin-left .2s ease-in-out);
  @include media-breakpoint-up(sm) {
    @include rem(padding-right, ($grid-gutter-width / 2));
    @include rem(padding-left, ($grid-gutter-width / 2));
  }
  @include media-breakpoint-up(lg) {
    @include rem(padding-right, $grid-gutter-width);
    @include rem(padding-left, $grid-gutter-width);
  }
}
// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.
.container-fluid {
  padding-right: 0;
  padding-left: 0;
  > .row {
    margin-right: 0;
    margin-left: 0;
  }
}
// Used in page header for most situations
.container-narrow {
  @include media-breakpoint-down(sm) {
    @include rem(padding-right, ($grid-gutter-width / 2));
    @include rem(padding-left, ($grid-gutter-width / 2));
  }
}

// Fluid container with thematic padding to be used when a white content section / division is needed
.container-division, .container-division-sm {
  @include center-block();
  background-color: $white;
  border-top: $border-width solid $border-color-primary;
  border-bottom: $border-width solid $border-color-primary;
  @include media-breakpoint-down(sm) {
    @include rem(margin-right, -($grid-gutter-width / 2));
    @include rem(margin-left, -($grid-gutter-width / 2));
  }
  @include media-breakpoint-up(sm) {
    border-right: $border-width solid $border-color-primary;
    border-left: $border-width solid $border-color-primary;
  }
  @if not $enable-flex { @include clearfix(); }
  & + & { border-top: none; }
}
.container-division {
  @include rem(padding, ($grid-gutter-width * 1.5) $grid-gutter-width);
  @include media-breakpoint-up(sm) { @include rem(padding, ($grid-gutter-width * 1.5)); }
}
.container-division-sm {
  @include rem(padding, ($grid-gutter-width / 2) $grid-gutter-width);
  @include media-breakpoint-up(sm) { @include rem(padding, $grid-gutter-width); }
}


// Specifically for use when nested within a container-division to indicate and divide major content sections
.container-subdivision {
  @include center-block();
  @include media-breakpoint-down(sm) { @include rem(padding-bottom, ($grid-gutter-width * 1.5)); }
  @include media-breakpoint-up(sm) { @include rem(padding-bottom, ($grid-gutter-width * 2)); }
  &:last-child { padding-bottom: 0; }
  + .container-subdivision {
    border-top: $border-width solid $border-color-primary;
    @include media-breakpoint-down(sm) { @include rem(padding-top, ($grid-gutter-width * 1.5)); }
    @include media-breakpoint-up(sm) { @include rem(padding-top, ($grid-gutter-width * 2)); }
  }

  &.container-flush{
    @include rem(margin-left, -$grid-gutter-width !important);
    @include rem(margin-right, -$grid-gutter-width !important);

    @include media-breakpoint-up(sm) {
      @include rem(margin-left, -$spacer-base-half !important);
      @include rem(margin-right, -$spacer-base-half !important);
    }
  }
  @if not $enable-flex { @include clearfix(); }
}
