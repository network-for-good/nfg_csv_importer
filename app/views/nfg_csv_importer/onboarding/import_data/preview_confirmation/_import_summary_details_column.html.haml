- i18n_scope = local_assigns[:i18n_scope]
- onboarder_presenter = local_assigns[:onboarder_presenter]
- humanize = local_assigns[:humanize]

-# This should be based on the import type, and probably run through the presenter so we're not hard coding stats.
= ui.nfg :typeface, title: t("stats.#{humanize}.heading", scope: i18n_scope)

-# the total, then the loop of charts
= ui.nfg :media, class: 'mt-3' do
  = ui.nfg :media_object do
    = fa_stacked_icon "#{onboarder_presenter.macro_summary_heading_icon(humanize)} inverse", base: 'circle', class: "mr-2 text-#{onboarder_presenter.color_theme(humanize)} fa-2x"

  = ui.nfg :media_body do
    = ui.nfg :typeface, title: onboarder_presenter.macro_summary_heading(humanize), class: 'display-4'
    %h2= onboarder_presenter.macro_summary_heading_value(humanize)

- onboarder_presenter.macro_summary_charts(humanize).each do |chart|
  - title = chart[:title]
  - total = chart[:total]
  - percentage = chart[:percentage]

  = ui.nfg :media, class: 'mt-3' do
    = ui.nfg :media_object do
      .mr-2
        -# TODO: Chartwell should be given responsive font-sizes.
        %span.chartwell.pies{ style: 'font-size: 76px; line-height: 0;' }
          %span{ class: "text-#{onboarder_presenter.color_theme(humanize)}" }= percentage
          %span.text-light= 100 - (percentage.to_i)
          %span.text-white= onboarder_presenter.chart_thickness

    = ui.nfg :media_body do
      = ui.nfg :typeface, title: ui.nfg(:icon, 'circle', onboarder_presenter.color_theme(humanize), text: title), class: 'display-4'
      %h2
        = total
        %small.font-size-base.text-muted
          ="(#{number_to_percentage(percentage, precision: 0)})"
