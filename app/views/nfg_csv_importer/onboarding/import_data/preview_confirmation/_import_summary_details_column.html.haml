- i18n_scope = local_assigns[:i18n_scope]
- onboarder_presenter = local_assigns[:onboarder_presenter]
- summarized_objects_name = local_assigns[:summarized_objects_name]

-# This should be based on the import type, and probably run through the presenter so we're not hard coding stats.
= ui.nfg :typeface, title: t("stats.#{summarized_objects_name}.heading", scope: i18n_scope)

-# the total, then the loop of charts
= ui.nfg :media do
  = ui.nfg :media_object, class: 'mr-2' do
    = ui.nfg :icon, "#{onboarder_presenter.summary_title_icon(summarized_objects_name)} 3x"

  = ui.nfg :media_body do
    = ui.nfg :typeface, title: onboarder_presenter.summary_total_title(summarized_objects_name), class: 'display-4'
    %h2= onboarder_presenter.summary_total_value(summarized_objects_name, summarized_object: onboarder_presenter.the_fake_import)

-# Now the summary / charts
- onboarder_presenter.summary_rows(summarized_objects_name).each_with_index do |summary_row, i|

  = ui.nfg :media do
    = ui.nfg :media_object, class: 'mr-2' do
      [chart]
    = ui.nfg :media_body do
      -# humanize and titleize the key in the event it wasn't setup that way in the import definition
      -# This is a "faked" :key component
      = ui.nfg :typeface, :title, class: 'display-4' do
        = ui.nfg :icon, 'circle', :primary, class: 'mr-1'
        = summary_row.first.humanize.titleize


      %h2
        = onboarder_presenter.summary_row_value(summarized_objects_name, summarized_object: onboarder_presenter.the_fake_import.summary, index: i)

        -# will need percentages here
        = ui.nfg :typeface, :muted, caption: '(100%)'